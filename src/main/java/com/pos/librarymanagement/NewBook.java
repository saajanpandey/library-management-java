/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.pos.librarymanagement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author saajan
 */
public class NewBook extends javax.swing.JFrame {

    /**
     * Creates new form NewBook
     */
    public NewBook() {
        initComponents();
        this.setTitle("Add Book");
        loadAuthorComboBox();
        loadPublisherComboBox();
        refreshTable();
    }

    private void refreshTable() {
        try (Connection con = SqlConnect.connect()) {

            PreparedStatement ps = con.prepareStatement("SELECT books.isbn, books.name, authors.name,publishers.name, books.published_year, books.copies_owned,books.edition,books.price,books.date_purchased FROM books JOIN authors ON authors.id = books.author_id JOIN publishers ON publishers.id = books.publisher_id; ");
            ResultSet rs = ps.executeQuery();
            jNewBookTable.setModel(DbUtils.resultSetToTableModel(rs));
            jNewBookTable.getColumnModel().getColumn(0).setHeaderValue("ISBN");
            jNewBookTable.getColumnModel().getColumn(1).setHeaderValue("Title");
            jNewBookTable.getColumnModel().getColumn(2).setHeaderValue("Author");
            jNewBookTable.getColumnModel().getColumn(3).setHeaderValue("Publisher");
            jNewBookTable.getColumnModel().getColumn(4).setHeaderValue("Published Year");
            jNewBookTable.getColumnModel().getColumn(5).setHeaderValue("Copies Owned");
            jNewBookTable.getColumnModel().getColumn(6).setHeaderValue("Edition");
            jNewBookTable.getColumnModel().getColumn(7).setHeaderValue("Price");
            jNewBookTable.getColumnModel().getColumn(8).setHeaderValue("Purchased Date");

        } catch (Exception e) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newBookPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        isbnNumber = new javax.swing.JTextField();
        bookTitle = new javax.swing.JTextField();
        bookPrice = new javax.swing.JTextField();
        addBook = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        copiesOwned = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        pubYear = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        bookEdition = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        authorCombo = new javax.swing.JComboBox<>();
        publisherCombo = new javax.swing.JComboBox<>();
        purchasedDate = new com.github.lgooddatepicker.components.DatePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        jNewBookTable = new javax.swing.JTable();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Book Operations");
        setResizable(false);

        newBookPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "New Book", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        jLabel1.setText("ISBN");

        jLabel2.setText("Title");

        jLabel3.setText("Author");

        jLabel4.setText("Publisher");

        jLabel5.setText("Price");

        addBook.setText("Add Book");
        addBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Copies Owned");

        jLabel7.setText("Published Year");

        jLabel8.setText("Edition");

        jLabel9.setText("Date Purchased");

        publisherCombo.setToolTipText("");

        jNewBookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Title", "Author", "Publisher", "Price", "Copies Owned", "Published Year", "Date Purchased", "Edition"
            }
        ));
        jNewBookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jNewBookTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jNewBookTable);

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newBookPanelLayout = new javax.swing.GroupLayout(newBookPanel);
        newBookPanel.setLayout(newBookPanelLayout);
        newBookPanelLayout.setHorizontalGroup(
            newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newBookPanelLayout.createSequentialGroup()
                .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newBookPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(newBookPanelLayout.createSequentialGroup()
                                .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel3))
                                    .addComponent(jLabel7))
                                .addGap(63, 63, 63)
                                .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(newBookPanelLayout.createSequentialGroup()
                                            .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(authorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(bookPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(isbnNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(pubYear, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(purchasedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(93, 93, 93)
                                            .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel6)))
                                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGroup(newBookPanelLayout.createSequentialGroup()
                                        .addComponent(addBook)
                                        .addGap(50, 50, 50)
                                        .addComponent(updateBtn)
                                        .addGap(60, 60, 60)
                                        .addComponent(deleteBtn)
                                        .addGap(28, 28, 28)
                                        .addComponent(backButton)))))
                        .addGap(49, 49, 49)
                        .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(publisherCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(copiesOwned, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(newBookPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 903, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        newBookPanelLayout.setVerticalGroup(
            newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newBookPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isbnNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(bookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(27, 27, 27)
                .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(publisherCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(authorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(28, 28, 28)
                .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(copiesOwned, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(bookPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(bookEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pubYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(28, 28, 28)
                .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(purchasedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(44, 44, 44)
                .addGroup(newBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBook)
                    .addComponent(backButton)
                    .addComponent(updateBtn)
                    .addComponent(deleteBtn))
                .addGap(65, 65, 65)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(newBookPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(newBookPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void addBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookActionPerformed
        // TODO add your handling code here:
        if (validInput()) {

            try {

                String isbn = isbnNumber.getText();
                String title = bookTitle.getText();
                String authorName = String.valueOf(authorCombo.getSelectedItem());
                int author = getAuthorId(authorName);
                String publisherName = String.valueOf(publisherCombo.getSelectedItem());
                int publisher = getPublisherId(publisherName);
                float price = Float.parseFloat(bookPrice.getText());
                int copies = Integer.parseInt(copiesOwned.getText());
                int year = Integer.parseInt(pubYear.getText());
                String edition = bookEdition.getText();

                SimpleDateFormat inputFormat = new SimpleDateFormat("MMMM dd, yyyy");
                SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd");

                Date date = inputFormat.parse(purchasedDate.getText());
                String formattedDate = outputFormat.format(date);

                try (Connection con = SqlConnect.connect()) {
                    PreparedStatement smt
                            = con.prepareStatement("INSERT INTO `books`(`isbn`, `name`, `author_id`, `publisher_id`, `published_year`, `copies_owned`, `edition`, `price`, `date_purchased`) VALUES (?,?,?,?,?,?,?,?,?)");

                    smt.setString(1, isbn);
                    smt.setString(2, title);
                    smt.setInt(3, author);
                    smt.setInt(4, publisher);
                    smt.setInt(5, year);
                    smt.setInt(6, copies);
                    smt.setString(7, edition);
                    smt.setFloat(8, price);
                    smt.setString(9, formattedDate);

                    PreparedStatement ps
                            = con.prepareStatement("INSERT INTO `book_count`( `book_id`, `count`) VALUES (?,?)");
                    ps.setString(1, isbn);
                    ps.setInt(2, copies);
                    smt.executeUpdate();
                    ps.executeUpdate();
                    con.close();
                    this.dispose();

                    JOptionPane.showMessageDialog(null, "New Book Added Successfully!");

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }

        }
        refreshTable();
    }//GEN-LAST:event_addBookActionPerformed

    private void jNewBookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jNewBookTableMouseClicked
        // TODO add your handling code here:
        copiesOwned.setEditable(false);
        int i = jNewBookTable.getSelectedRow();
        TableModel model = jNewBookTable.getModel();
        isbnNumber.setText(model.getValueAt(i, 0).toString());
        bookTitle.setText(model.getValueAt(i, 1).toString());
        authorCombo.getModel().setSelectedItem(model.getValueAt(i, 2).toString());
        publisherCombo.getModel().setSelectedItem(model.getValueAt(i, 3).toString());
        pubYear.setText(model.getValueAt(i, 4).toString());
        copiesOwned.setText(model.getValueAt(i, 5).toString());
        bookEdition.setText(model.getValueAt(i, 6).toString());
        bookPrice.setText(model.getValueAt(i, 7).toString());
        purchasedDate.setText(model.getValueAt(i, 8).toString());
    }//GEN-LAST:event_jNewBookTableMouseClicked

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        try (Connection con = SqlConnect.connect()) {

            PreparedStatement ps = con.prepareStatement("Delete from books where isbn=?");
            PreparedStatement smt = con.prepareStatement("Delete from book_count where isbn=?");

            ps.setString(1, isbnNumber.getText());
            smt.setString(1, isbnNumber.getText());
            ps.executeUpdate();
            smt.executeUpdate();
            JOptionPane.showMessageDialog(null, "Book Is Removed.");
            isbnNumber.setText("");
            bookTitle.setText("");
            authorCombo.getModel().setSelectedItem("");
            publisherCombo.getModel().setSelectedItem("");
            pubYear.setText("");
            copiesOwned.setText("");
            bookEdition.setText("");
            bookPrice.setText("");
            purchasedDate.setText("");

            refreshTable();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Record is not deleted", "Alert", JOptionPane.WARNING_MESSAGE);
        }
        refreshTable();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        try (Connection con = SqlConnect.connect()) {

            String title = bookTitle.getText();
            String authorName = String.valueOf(authorCombo.getSelectedItem());
            int author = getAuthorId(authorName);
            String publisherName = String.valueOf(publisherCombo.getSelectedItem());
            int publisher = getPublisherId(publisherName);
            float price = Float.parseFloat(bookPrice.getText());
            int copies = Integer.parseInt(copiesOwned.getText());
            int year = Integer.parseInt(pubYear.getText());
            String edition = bookEdition.getText();

            SimpleDateFormat inputFormat = new SimpleDateFormat("MMMM dd, yyyy");
            SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd");

            Date date = inputFormat.parse(purchasedDate.getText());
            String formattedDate = outputFormat.format(date);

            PreparedStatement ps = con.prepareStatement("UPDATE `books` SET name=?,"
                    + "author_id=?,publisher_id=?,"
                    + "`published_year`=?,`copies_owned`=?,"
                    + "`edition`=?,`price`=?,"
                    + "`date_purchased`=? WHERE isbn= ?");

            ps.setString(1, title);
            ps.setInt(2, author);
            ps.setInt(3, publisher);
            ps.setInt(4, year);
            ps.setInt(5, copies);
            ps.setString(6, edition);
            ps.setFloat(7, price);
            ps.setString(8, formattedDate);
            ps.setString(9, isbnNumber.getText());

            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Book Infomation is updated");
            isbnNumber.setText("");
            bookTitle.setText("");
            authorCombo.getModel().setSelectedItem("");
            publisherCombo.getModel().setSelectedItem("");
            pubYear.setText("");
            copiesOwned.setText("");
            bookEdition.setText("");
            bookPrice.setText("");
            purchasedDate.setText("");
        } catch (Exception e) {
            System.out.print(e.getMessage());
            JOptionPane.showMessageDialog(null, "Record Not Updated", "Alert", JOptionPane.WARNING_MESSAGE);
        }
        refreshTable();
    }//GEN-LAST:event_updateBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewBook().setVisible(true);
            }
        });
    }

    public boolean validInput() {
        if (isbnNumber.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "ISBN is required.");
            isbnNumber.requestFocus();
            return false;

        } else if (bookTitle.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Book Title is required.");
            bookTitle.requestFocus();
            return false;
        } else if (bookPrice.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Book Price is required.");
            bookPrice.requestFocus();
            return false;
        } else if (copiesOwned.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Copies Owned is required.");
            copiesOwned.requestFocus();
            return false;
        } else if (pubYear.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Published Year is required.");
            pubYear.requestFocus();
            return false;
        } else if (bookEdition.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Book Edition is required.");
            bookEdition.requestFocus();
            return false;
        } else if (purchasedDate.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Purchased Date is required.");
            purchasedDate.requestFocus();
            return false;
        }
        return true;
    }

    private void loadAuthorComboBox() {
        try (Connection con = SqlConnect.connect()) {

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("select * from authors");
            while (rs.next()) {
                String pat = rs.getString("name");
                authorCombo.addItem(pat);
            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void loadPublisherComboBox() {
        try (Connection con = SqlConnect.connect()) {

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("select * from publishers");
            while (rs.next()) {
                String pat = rs.getString("name");
                publisherCombo.addItem(pat);
            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, e);
        }
    }

    private int getPublisherId(String name) {
        try (Connection con = SqlConnect.connect()) {

            PreparedStatement ps = con.prepareStatement("Select id from publishers where name=? ");
            ps.setString(1, name);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                int pubId = rs.getInt("id");
                return pubId;
            }

        } catch (Exception e) {
            return 0;
        }
        return 0;
    }

    private int getAuthorId(String name) {
        try (Connection con = SqlConnect.connect()) {

            PreparedStatement ps = con.prepareStatement("Select id from authors where name=? ");
            ps.setString(1, name);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                int authId = rs.getInt("id");
                return authId;
            }

        } catch (Exception e) {
            return 0;
        }
        return 0;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBook;
    private javax.swing.JComboBox<String> authorCombo;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField bookEdition;
    private javax.swing.JTextField bookPrice;
    private javax.swing.JTextField bookTitle;
    private javax.swing.JTextField copiesOwned;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField isbnNumber;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTable jNewBookTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel newBookPanel;
    private javax.swing.JTextField pubYear;
    private javax.swing.JComboBox<String> publisherCombo;
    private com.github.lgooddatepicker.components.DatePicker purchasedDate;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
